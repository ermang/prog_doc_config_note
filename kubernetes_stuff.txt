kubernetes_stuff

kubectl appy -f my_super.yml
kubectl delete -f my_super.yml
minikube service <service-name> --url
kubectl get pv => List PersistentVolumes
kubectl describe pv
kubectl describe pvc

kubectl cluster-info
kubectl get nodes
kubectl get namespaces
kubectl get pods -A => show all pods across namespaces
kubectl get pods -n development -o wide
kubectl get services -A => show all services across namespaces
kubectl get deployments -n development => show all deployments in namespace 'development'
kubectl delete pod pod-info-deployment-757cb75bbb-blhll -n development => delete the pod with name in namespace 'developemnt'
kubectl describe pod pod-info-deployment-757cb75bbb-d6t8l -n development => look at pods event logs
kubectl exec -it busybox-6b95744666-2hfrb -- /bin/sh => connec to pod and use sh
kubectl logs pod-info-deployment-757cb75bbb-cdl5t -n development => view application logs
kubectl top pods => like top but for pods, cool
kubectl diff -f my.yml => shows whats going to change, assume my.yml was applied then modified before the diff subcommand
kubectl apply -f my.yml --dry-run=server =>

kubectl get storageclass local-storage -o yaml
kubectl get storageclass

kubectl run busybox --image=busybox --restart=Never --rm -it -- sh

kubectl cp <pod-name>:<path-to-file> <destination-path-on-host> => to copy something from pod to host machine
kubectl cp my-pod:/data/myfile.txt .

kubectl cp ./osman.txt n8n-deployment-5cb75d885d-822vd:/home/node/.n8n => current directory deki osman.txt i pod id nin icinde belirtilen klasore kopyalamaca

minikube_specific_stuff
-----
alias kubectl="minikube kubectl --"


minikube service <service-name> --url

minikube kubectl -- get po -A
minikube delete --all => delete all of minikube cluesters

#list of addons in minikube
minikube addons list

#to enable metrics-server addon
minikube addons enable metrics-server

# run top every 2 sec. by default
watch minikube kubectl --  top pods


persistent volume leri buraya atiyor, sallamiyor verilen hostpath i kind: PersistentVolume icin

storageClassName i hic yazmazsan
/var/lib/docker/volumes/minikube/_data/hostpath-provisioner/default/n8n-pvc #

storageClassName: "" boyle yazarsan da minikube instance i icine atiyormus
oraya nasil gidiyon ?
minikube ssh
cd yle git bak verdigin path e gorucen orda

In Minikube, the local volume type is supported through the local-path-provisioner addon.

To enable the local volume type in Minikube, you need to start Minikube with the --mount-string flag and specify the directory to use for the local volumes. Here are the steps to follow:

    Start Minikube with the --mount-string flag:


minikube start --mount-string="/path/to/local/volumes:/mnt/local-pv"

Replace /path/to/local/volumes with the directory on your host machine that you want to use for the local volumes.

Verify that the local volume type is available:



    kubectl get cs

    Look for the storage.k8s.io/local-volume entry in the STORAGECLASS column. If it's not there, try restarting Minikube and checking again.

You can now create a PersistentVolume with the local volume type in your YAML file, and use it in a Pod as you normally would.
-----


Kubernetes is a portable, extensible, open source platform for managing containerized workloads and services, that facilitates both declarative configuration and automation.

When you deploy Kubernetes, you get a cluster.

A Kubernetes cluster consists of a set of worker machines, called nodes, that run containerized applications. Every cluster has at least one worker node.

The worker node(s) host the Pods that are the components of the application workload. The control plane manages the worker nodes and the Pods in the cluster.

Node Components
    Node components run on every node, maintaining running pods and providing the Kubernetes runtime environment.
    - kubelet: An agent that runs on each node in the cluster. It makes sure that containers are running in a Pod.
    - kube-proxy: kube-proxy is a network proxy that runs on each node in your cluster, implementing part of the Kubernetes Service concept

A workload is an application running on Kubernetes. Whether your workload is a single component or several that work together, on Kubernetes you run it inside a set of pods.

In Kubernetes, a Pod represents a set of running containers on your cluster.

Pods are the smallest deployable units of computing that you can create and manage in Kubernetes.

A Pod (as in a pod of whales or pea pod) is a group of one or more containers, with shared storage and network resources, and a specification for how to run the containers.

The common format of a kubectl command is:

kubectl action resource

kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1

kubectl get deployments

    kubectl get => list resources
    kubectl describe => show detailed information about a resource
    kubectl logs => print the logs from a container in a pod
    kubectl exec => execute a command on a container in a pod

Management technique                Operates on             Recommended environment Learning curve
Imperative commands                 Live objects            Development projects    Lowest
Imperative object configuration     Individual files        Production projects     Moderate
Declarative object configuration    Directories of files    Production projects     Highest
